@page "/account/details"
@inject HttpClient Http
@using PredictionLeague.Shared.Account

<PageTitle>My Details</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="page-container">
            <div class="form-container">
                <h3 class="text-center fw-bold text-white mb-4">My Details</h3>

                @if (_isLoading)
                {
                    <p class="text-center text-white"><em>Loading your details...</em></p>
                }
                else if (_model != null)
                {
                    <EditForm Model="_model" OnValidSubmit="HandleUpdateDetails" Context="editFormContext">
                        <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">@_errorMessage</div>
                        }
                        @if (!string.IsNullOrEmpty(_successMessage))
                        {
                            <div class="alert alert-success" role="alert">@_successMessage</div>
                        }

                        <div class="mb-3">
                            <label for="email" class="form-label text-white">Email Address</label>
                            <InputText id="email" class="form-control" @bind-Value="_model.Email" disabled />
                            <small class="form-text text-white-50">Your email address cannot be changed.</small>
                        </div>

                        <div class="mb-3">
                            <label for="firstName" class="form-label text-white">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="_model.FirstName" />
                            <ValidationMessage For="@(() => _model.FirstName)" />
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label text-white">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="_model.LastName" />
                            <ValidationMessage For="@(() => _model.LastName)" />
                        </div>

                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label text-white">Phone Number (UK Mobile)</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="_model.PhoneNumber" />
                            <ValidationMessage For="@(() => _model.PhoneNumber)" />
                        </div>

                        <div class="d-grid mt-4">
                            <button type="submit" class="btn green-button" disabled="@_isBusy">
                                @if (_isBusy)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Saving...</span>
                                }
                                else
                                {
                                    <span>Update Details</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <p class="p-4">You must be logged in to view this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserDetails? _model;
    private bool _isLoading = true;
    private bool _isBusy;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _model = await Http.GetFromJsonAsync<UserDetails>("api/account/details");
        }
        catch (Exception)
        {
            _errorMessage = "We couldn't load your details right now. Please try again later.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleUpdateDetails()
    {
        _isBusy = true;
        _errorMessage = null;
        _successMessage = null;

        if (_model == null)
        {
            _errorMessage = "Model data is missing. Please try again.";
            _isBusy = false;
            return;
        }
      
        var request = new UpdateUserDetailsRequest
        {
            FirstName = _model.FirstName,
            LastName = _model.LastName,
            PhoneNumber = _model.PhoneNumber
        };

        var response = await Http.PutAsJsonAsync("api/account/details", request);
        if (response.IsSuccessStatusCode)
        {
            _successMessage = "Your details have been updated successfully.";
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            try
            {
                var errorContent = await response.Content.ReadFromJsonAsync<System.Text.Json.Nodes.JsonNode>();

                _errorMessage = errorContent?["errors"]?
                    .AsObject().FirstOrDefault().Value?
                    .AsArray().FirstOrDefault()?.ToString();
            }
            catch
            {
                _errorMessage = "An unknown validation error occurred.";
            }
        }
        else
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
        }
      
        _isBusy = false;
    }
}
