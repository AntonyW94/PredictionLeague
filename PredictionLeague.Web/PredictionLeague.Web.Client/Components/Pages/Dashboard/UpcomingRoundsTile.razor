@inject HttpClient Http
@inject IBrowserService BrowserService

@using PredictionLeague.Contracts.Dashboard
@using PredictionLeague.Web.Client.Services.Browser

<div class="dashboard-card h-100 @(_rounds?.Count == 1 ? "center-content" : "")">
    <h3 class="text-white text-center fw-bold mb-4">Upcoming Rounds</h3>
    <ApiError Message="@_errorMessage" />

    @if (_isLoading)
    {
        <p class="text-center text-white"><em>Loading rounds...</em></p>
    }
    else if (_rounds != null && _rounds.Any())
    {
        <div class="carousel-container">
            @if ((_isDesktop && _rounds.Count > 2) || (!_isDesktop && _rounds.Count > 1))
            {
                <button class="carousel-btn" @onclick="ShowPrevious" disabled="@(_currentRoundIndex == 0)">
                    <span class="bi bi-chevron-left"></span>
                </button>
            }

            <div class="rounds-track-wrapper">
                <div class="rounds-track" style="@_trackStyle">
                    @foreach (var round in _rounds)
                    {
                        <div class="round-card-wrapper">
                            <RoundCard Round="round" />
                        </div>
                    }
                </div>
            </div>

            @if ((_isDesktop && _rounds.Count > 2) || (!_isDesktop && _rounds.Count > 1))
            {
                <button class="carousel-btn" @onclick="ShowNext" disabled="@IsAtEnd()">
                    <span class="bi bi-chevron-right"></span>
                </button>
            }
        </div>
    }
    else
    {
        <div class="d-flex flex-column align-items-center justify-content-center flex-grow-1">
            <p class="text-white fw-bold text-center">There are currently no upcoming rounds available for you to predict.</p>
        </div>
    }
</div>

@code {
    private List<UpcomingRoundDto>? _rounds;
    private bool _isLoading = true;
    private string? _errorMessage;
    private int _currentRoundIndex;
    private bool _isDesktop;
    private string _trackStyle = "";

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        try
        {
            _isDesktop = await BrowserService.IsDesktop();
            _rounds = await Http.GetFromJsonAsync<List<UpcomingRoundDto>>("api/dashboard/upcoming-rounds");
        }
        catch (Exception)
        {
            _errorMessage = "Could not load upcoming rounds.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowPrevious()
    {
        if (_currentRoundIndex > 0)
        {
            _currentRoundIndex--;
            UpdateTrackStyle();
        }
    }

    private void ShowNext()
    {
        if (_rounds != null && !IsAtEnd())
        {
            _currentRoundIndex++;
            UpdateTrackStyle();
        }
    }

    private void UpdateTrackStyle()
    {
        var percentageToMove = _isDesktop ? 50 : 100;
        _trackStyle = $"transform: translateX(-{_currentRoundIndex * percentageToMove}%); transition: transform 0.3s ease-in-out;";
    }

    private bool IsAtEnd()
    {
        if (_rounds == null) 
            return true;

        var roundsPerPage = _isDesktop ? 2 : 1;
        return _currentRoundIndex >= _rounds.Count - roundsPerPage;
    }
}