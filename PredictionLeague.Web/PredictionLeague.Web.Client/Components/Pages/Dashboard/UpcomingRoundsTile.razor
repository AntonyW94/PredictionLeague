@using PredictionLeague.Contracts.Dashboard
@inject HttpClient Http

<div class="dashboard-card h-100">
    <h3 class="text-white text-center fw-bold mb-4">Upcoming Rounds</h3>
    @if (_isLoading)
    {
        <p class="text-center text-white"><em>Loading rounds...</em></p>
    }
    else if (_rounds != null && _rounds.Any())
    {
        <div class="carousel-container flex-grow-1">
            @if (_rounds.Count > 1)
            {
                <button class="carousel-btn" @onclick="ShowPreviousRound" disabled="@(_currentRoundIndex == 0)">
                    <span class="bi bi-chevron-left"></span>
                </button>
            }

            @{
                var round = _rounds[_currentRoundIndex];
                <div class="round-card">
                    <div class="round-card-header">
                        <h5 class="mb-0 fw-bold text-white">@round.SeasonName</h5>
                        <span>Round @round.RoundNumber</span>
                    </div>
                    <div class="round-card-body">
                        <span class="status-pill bg-pl-pink mb-3">
                            Deadline: @round.Deadline.ToString("ddd dd MMM, HH:mm")
                        </span>
                        <NavLink href="@($"/predictions/{round.Id}")" class="btn green-button w-100">
                            Predict Now
                        </NavLink>

                        <AuthorizeView Roles="@RoleNames.Administrator">
                            <NavLink href="@($"/admin/rounds/{round.Id}/results")" class="btn light-cyan-button w-100 mt-3">
                                Enter Results
                            </NavLink>
                        </AuthorizeView>
                    </div>
                </div>
            }

            @if (_rounds.Count > 1)
            {
                <button class="carousel-btn" @onclick="ShowNextRound" disabled="@(_currentRoundIndex >= _rounds.Count - 1)">
                    <span class="bi bi-chevron-right"></span>
                </button>
            }
        </div>
    }
    else
    {
        <p class="text-white fw-bold text-center">There are currently no upcoming rounds available.</p>
    }
</div>

@code {
    private List<UpcomingRoundDto>? _rounds;
    private bool _isLoading = true;
    private int _currentRoundIndex;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            _rounds = await Http.GetFromJsonAsync<List<UpcomingRoundDto>>("api/dashboard/upcoming-rounds");
        }
        catch (Exception)
        {
            // Handle error, maybe show an error message
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowPreviousRound()
    {
        if (_currentRoundIndex > 0)
        {
            _currentRoundIndex--;
        }
    }

    private void ShowNextRound()
    {
        if (_rounds != null && _currentRoundIndex < _rounds.Count - 1)
        {
            _currentRoundIndex++;
        }
    }
}
