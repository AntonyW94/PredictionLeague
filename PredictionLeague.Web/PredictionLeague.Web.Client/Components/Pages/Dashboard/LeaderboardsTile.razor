@inject IDashboardStateService DashboardState

@implements IDisposable

@inherits BaseLeaderboardComponent

@using PredictionLeague.Web.Client.Services.Dashboard

<div class="card h-100">
    <h3 class="text-white text-center fw-bold mb-4">Leaderboards</h3>

    <ApiError Message="@DashboardState.LeaderboardsErrorMessage" />

    @if (DashboardState.IsLeaderboardsLoading)
    {
        <p class="text-center text-white"><em>Loading...</em></p>
    }
    else if (!DashboardState.Leaderboards.Any())
    {
        <p class="text-center text-white">No active leaderboards.</p>
    }
    else
    {
        <div class="carousel-wrapper">
            <div class="carousel-container" @ontouchstart="HandleTouchStart" @ontouchmove="HandleTouchMove" @ontouchend="HandleTouchEnd">
                <div class="carousel-track" style="@_trackStyle">
                    @foreach (var leaderboard in DashboardState.Leaderboards)
                    {
                        <div class="carousel-item-wrapper">
                            <div class="carousel-item-content">
                                <div class="leaderboard-card">
                                    <div class="card-header w-100">
                                        <h5 class="card-title text-white fw-bold centre">@leaderboard.LeagueName</h5>
                                        <small class="text-white-50 centre">@leaderboard.SeasonName</small>
                                    </div>
                                    <div class="league-card-body justify-start w-100">
                                        <div class="table-responsive w-100">
                                            <table class="leaderboard-table light text-white">
                                                <thead>
                                                    <tr>
                                                        <th class="rank-col">#</th>
                                                        <th class="player-name-col">Player</th>
                                                        <th class="points-col">Pts</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var entry in leaderboard.Entries)
                                                    {
                                                        <tr class="@(GetUserHighlightClass(entry.UserId)) test @entry.UserId">
                                                            <td class="rank-col fw-bold">@entry.Rank</td>
                                                            <td class="player-name-col fw-bold">@entry.PlayerName</td>
                                                            <td class="points-col fw-bold">@entry.TotalPoints</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>


            @if (DashboardState.Leaderboards.Count > 1)
            {
                <div class="carousel-dots">
                    @for (var i = 0; i < DashboardState.Leaderboards.Count; i++)
                    {
                        var index = i;
                        <span class="carousel-dot @(index == _currentIndex ? "active" : "")" @onclick="() => GoToSlide(index)"></span>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private int _currentIndex;
    private double _touchStartX;
    private string _trackStyle = "transform: translateX(0%);";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DashboardState.OnStateChange += StateHasChanged;
        await DashboardState.LoadLeaderboardsAsync();
    }

    private void HandleTouchStart(TouchEventArgs e) => _touchStartX = e.Touches[0].ClientX;
    private static void HandleTouchMove(TouchEventArgs e) { }

    private void HandleTouchEnd(TouchEventArgs e)
    {
        var touchEndX = e.ChangedTouches[0].ClientX;
        var diffX = _touchStartX - touchEndX;

        if (!(Math.Abs(diffX) > 50))
            return;

        if (diffX > 0)
            ShowNext();
        else
            ShowPrevious();
    }

    private void GoToSlide(int index)
    {
        _currentIndex = index;
        UpdateTrackStyle();
    }

    private void ShowPrevious()
    {
        if (_currentIndex <= 0)
            return;

        _currentIndex--;
        UpdateTrackStyle();
    }

    private void ShowNext()
    {
        if (_currentIndex >= DashboardState.Leaderboards.Count - 1) 
            return;

        _currentIndex++;
        UpdateTrackStyle();
    }

    private void UpdateTrackStyle()
    {
        _trackStyle = $"transform: translateX(-{_currentIndex * 100}%);";
    }

    public void Dispose()
    {
        DashboardState.OnStateChange -= StateHasChanged;
    }
}