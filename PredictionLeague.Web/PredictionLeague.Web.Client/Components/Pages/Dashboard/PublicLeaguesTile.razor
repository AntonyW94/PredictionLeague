@using PredictionLeague.Domain.Common.Enumerations
@inject ViewModels.Dashboard.PublicLeaguesViewModel ViewModel

<div class="dashboard-card h-100">
    <h3 class="text-white text-center fw-bold mb-4">Leagues</h3>
    
    <ApiError Message="@ViewModel.JoinLeagueError" />

    @if (ViewModel.IsLoading)
    {
        <p class="text-center text-white"><em>Loading Leagues...</em></p>
    }
    else if (ViewModel.PublicLeagues.Any())
    {
        <div class="list-group flex-grow-1">
            @foreach (var league in ViewModel.PublicLeagues)
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center joinable-league-item">
                    <div>
                        <h6 class="mb-0 fw-bold text-white">@league.Name</h6>
                        <small class="text-white-50">@league.SeasonName</small>
                    </div>

                    @if (league.Status == null)
                    {
                        <button class="btn @GetStatusClass(league.Status)"
                                @onclick="() => HandleJoinLeagueAsync(league.Id)"
                                disabled="@_isBusy">
                            Join
                        </button>
                    }
                    else
                    {
                        <span class="status-pill @GetStatusClass(league.Status)">
                            @league.Status.ToString()
                        </span>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-white fw-bold text-center">There are currently no public leagues.</p>
    }
</div>

@code {
    private bool _isBusy;

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadPublicLeaguesAsync();
    }

    private async Task HandleJoinLeagueAsync(int leagueId)
    {
        _isBusy = true;

        await ViewModel.JoinLeagueAsync(leagueId);

        _isBusy = false;

        StateHasChanged();
    }

    private static string GetStatusClass(LeagueMemberStatus? status)
    {
        return status switch
        {
            LeagueMemberStatus.Approved => "green-button",
            LeagueMemberStatus.Pending => "dark-pink-button",
            LeagueMemberStatus.Rejected => "pink-button",
            _ => "dark-pink-button"
        };
    }
}