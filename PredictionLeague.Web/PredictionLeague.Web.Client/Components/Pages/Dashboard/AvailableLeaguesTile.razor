@inject IDashboardStateService DashboardState
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

@using PredictionLeague.Web.Client.Services.Dashboard
@using System.Globalization

<div class="dashboard-card h-100 d-flex flex-column">
    <h3 class="text-white text-center fw-bold mb-4">Available Leagues</h3>

    <ApiError Message="@DashboardState.AvailableLeaguesErrorMessage" />

    @if (DashboardState.IsLoading)
    {
        <p class="text-center text-white"><em>Loading leagues...</em></p>
    }
    else if (DashboardState.AvailableLeagues.Any())
    {
        <div class="leagues-grid">
            @foreach (var league in DashboardState.AvailableLeagues)
            {
                <div class="league-card">
                    <div class="league-card-header">
                        <h6 class="mb-0 fw-bold text-white">@league.Name</h6>
                        <small class="text-white-50">@league.SeasonName</small>
                    </div>

                    <div class="league-card-body">
                        <div class="member-count-info">
                            <i class="bi bi-people-fill"></i>
                            <span>@league.MemberCount Members</span>
                        </div>
                        
                        <div>
                            <span class="league-price">@(league.Price > 0 ? league.Price.ToString("C", new CultureInfo("en-GB")) + " Entry" : "Free Entry")</span>
                        </div>

                        <div>
                            <span class="status-pill bg-pl-pink">
                                Deadline: @league.EntryDeadline.ToString("dd MMM yyyy")
                            </span>
                        </div>
                    </div>

                    <div class="league-card-footer">
                        <button class="btn btn-sm dark-pink-button"
                                @onclick="() => HandleJoinLeagueAsync(league.Id)"
                                disabled="@_isBusy">
                            Join
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-white fw-bold text-center">There are currently no public leagues available.</p>
    }

    <div class="mt-auto pt-4">
        <button class="btn light-cyan-button w-100" @onclick="ShowJoinPrivateLeagueModal">Join Private League with Code</button>
    </div>
</div>

@if (_showPrivateLeagueModal)
{
    <JoinPrivateLeagueModal OnClose="HideJoinPrivateLeagueModal" />
}

@code {
    private bool _isBusy;
    private bool _showPrivateLeagueModal;

    protected override void OnInitialized()
    {
        DashboardState.OnStateChange += StateHasChanged;
    }

    private async Task ShowJoinPrivateLeagueModal()
    {
        _showPrivateLeagueModal = true;
        await Task.Delay(50);
        await JsRuntime.InvokeVoidAsync("blazorInterop.showModal", "joinPrivateLeagueModal");
    }

    private async Task HideJoinPrivateLeagueModal()
    {
        await JsRuntime.InvokeVoidAsync("blazorInterop.hideModal", "joinPrivateLeagueModal");
        _showPrivateLeagueModal = false;
    }

    private async Task HandleJoinLeagueAsync(int leagueId)
    {
        _isBusy = true;

        await DashboardState.JoinPublicLeagueAsync(leagueId);

        _isBusy = false;
    }

    public ValueTask DisposeAsync()
    {
        DashboardState.OnStateChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}