@inject IDashboardStateService DashboardState
@inject IJSRuntime JsRuntime

@implements IAsyncDisposable

@using PredictionLeague.Web.Client.Services.Dashboard
@using System.Globalization

<div class="card h-100 d-flex flex-column">
    <h3 class="text-white text-center fw-bold mb-4">Available Leagues</h3>

    <ApiError Message="@DashboardState.AvailableLeaguesErrorMessage" />

    @if (DashboardState.IsAvailableLeaguesLoading)
    {
        <p class="text-center text-white"><em>Loading leagues...</em></p>
    }
    else if (DashboardState.AvailableLeagues.Any())
    {
        <div class="card-grid row">
            @foreach (var league in DashboardState.AvailableLeagues)
            {
                <div class="col-lg-5">
                    <div class="action-card light">
                        <div class="card-header">
                            <h5 class="fw-bold text-white">@league.Name</h5>
                            <small class="text-white-50">@league.SeasonName</small>
                        </div>

                        <div class="action-card-body">
                            <div class="action-card-row action-card-row--centered">
                                <div class="badge-group badge-group--red">
                                    <span class="badge-icon"><i class="bi bi-alarm"></i></span>
                                    <span>@league.EntryDeadline.ToString("dd MMM yyyy HH:mm")</span>
                                </div>
                            </div>

                            <div class="action-card-row">
                                <div class="badge-group badge-group--blue">
                                    <span class="badge-icon">
                                        <i class="bi bi-people-fill"></i>
                                    </span>
                                    <span>@league.MemberCount</span>
                                </div>

                                <div class="badge-group badge-group--green">
                                    <span class="badge-icon">
                                        <i class="bi bi-cash-stack"></i>
                                    </span>
                                    <span>@(league.Price > 0 ? league.Price.ToString("C", new CultureInfo("en-GB")) : "Free Entry")</span>
                                </div>
                            </div>
                        </div>

                        <div class="action-card-footer">
                            <button class="btn btn-sm purple-accent-button w-100"
                                    @onclick="() => HandleJoinLeagueAsync(league.Id)"
                                    disabled="@_isBusy">
                                Join
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-white fw-bold text-center">There are currently no public leagues available.</p>
    }

    <div class="mt-auto pt-4">
        <button class="btn blue-light-button w-100" @onclick="ShowJoinPrivateLeagueModal">Join Private League with Code</button>
    </div>
</div>

@if (_showPrivateLeagueModal)
{
    <JoinPrivateLeagueModal OnClose="HideJoinPrivateLeagueModal" />
}

@code {
    private bool _isBusy;
    private bool _showPrivateLeagueModal;

    protected override async Task OnInitializedAsync()
    {
        DashboardState.OnStateChange += StateHasChanged;
        await DashboardState.LoadAvailableLeaguesAsync();
    }

    private async Task ShowJoinPrivateLeagueModal()
    {
        _showPrivateLeagueModal = true;
        await Task.Delay(50);
        await JsRuntime.InvokeVoidAsync("blazorInterop.showModal", "joinPrivateLeagueModal");
    }

    private async Task HideJoinPrivateLeagueModal()
    {
        await JsRuntime.InvokeVoidAsync("blazorInterop.hideModal", "joinPrivateLeagueModal");
        _showPrivateLeagueModal = false;
    }

    private async Task HandleJoinLeagueAsync(int leagueId)
    {
        _isBusy = true;

        await DashboardState.JoinPublicLeagueAsync(leagueId);

        _isBusy = false;
    }

    public ValueTask DisposeAsync()
    {
        DashboardState.OnStateChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}