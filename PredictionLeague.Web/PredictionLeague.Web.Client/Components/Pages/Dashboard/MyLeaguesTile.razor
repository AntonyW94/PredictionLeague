@inject NavigationManager NavigationManager
@inject IDashboardStateService DashboardState
@inject IJSRuntime JsRuntime

@using PredictionLeague.Domain.Common.Enumerations
@using PredictionLeague.Web.Client.Services.Dashboard

@implements IAsyncDisposable

<div class="dashboard-card h-100">
    <h3 class="text-white text-center fw-bold mb-4">My Leagues</h3>

    <ApiError Message="@DashboardState.MyLeaguesErrorMessage" />

    @if (DashboardState.IsLoading)
    {
        <p class="text-center text-white"><em>Loading my leagues...</em></p>
    }
    else if (!DashboardState.MyLeagues.Any())
    {
        <p class="text-center text-white">You haven't joined any leagues yet.</p>
    }
    else
    {
        <div class="leagues-grid">
            @foreach (var league in DashboardState.MyLeagues)
            {
                <div class="league-card">
                    <div class="league-card-header">
                        <h5 class="fw-bold text-white">@league.Name</h5>
                        <small class="text-white-50">@league.SeasonName</small>
                    </div>

                    <div class="league-card-body">
                        @if (league.Status == LeagueMemberStatus.Approved)
                        {
                            <div class="card-info-row">
                                <div class="status-pill-group status-pill-group--green status-pill-group--icon-only">
                                    <span class="status-icon" title="Approved"><i class="bi bi-check-lg"></i></span>
                                </div>
                    
                                @if (league.Rank.HasValue && league.MemberCount.HasValue)
                                {
                                    <div class="position-info">
                                        <span>@league.Rank</span>
                                        <span> / @league.MemberCount</span>
                                    </div>
                                }
                            </div>
                           
                        }
                        else if (league.Status == LeagueMemberStatus.Pending)
                        {
                            <div class="status-pill-group status-pill-group--purple">
                                <span class="status-icon" title="Pending Approval"><i class="bi bi-clock-fill"></i></span>
                                <span>Pending Approval</span>
                            </div>
                        }
                        else if (league.Status == LeagueMemberStatus.Rejected)
                        {
                            <div class="status-pill-group status-pill-group--red">
                                <span class="status-icon" title="Rejected"><i class="bi bi-x-lg"></i></span>
                                <span>Rejected by Admin</span>
                            </div>
                        }
                    </div>

                    <div class="league-card-footer">
                        @if (league.Status == LeagueMemberStatus.Rejected)
                        {
                            <button class="btn btn-sm pink-button w-100"  @onclick="() => HandleRemoveLeagueAsync(league.Id, league.Name)" disabled="@DashboardState.IsLoading">
                                Remove
                            </button>
                        }
                        else
                        {
                            var canViewDashboard = league.Status == LeagueMemberStatus.Approved;
                            <button class="btn btn-sm @(canViewDashboard ? "dark-pink-button" : "disabled-button") w-100"
                                    disabled="@(!canViewDashboard)"
                                    title="@(canViewDashboard ? "View League Dashboard" : "Unavailable until approved by the league admin")"
                                    @onclick="() => ViewLeagueDashboard(league.Id)">
                                View
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        DashboardState.OnStateChange += StateHasChanged;
     
        if (!DashboardState.MyLeagues.Any())
            await DashboardState.InitializeAsync();
    }

    private void ViewLeagueDashboard(int leagueId)
    {
        NavigationManager.NavigateTo($"/leagues/{leagueId}/dashboard");
    }

    private async Task HandleRemoveLeagueAsync(int leagueId, string leagueName)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("blazorInterop.showConfirm",
            new object[] { $"Remove '{leagueName}'?", "This will remove the rejected league from your dashboard.", "Yes, Remove It", "Cancel" });

        if (confirmed)
            await DashboardState.RemoveRejectedLeagueAsync(leagueId);
    }

    public ValueTask DisposeAsync()
    {
        DashboardState.OnStateChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}