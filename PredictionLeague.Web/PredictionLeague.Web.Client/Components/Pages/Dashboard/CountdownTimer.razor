@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<div class="badge-group badge-group--red">
    <span class="badge-icon" title="Deadline">
        <i class="bi bi-alarm"></i>
    </span>
    <span>
        @_timeRemaining
    </span>
</div>

@code {
    [Parameter, EditorRequired]
    public DateTime Deadline { get; set; }
   
    private readonly string _timerId = Guid.NewGuid().ToString();
    private DotNetObjectReference<CountdownTimer>? _dotNetHelper;
    private string _timeRemaining = "";
   
    protected override async Task OnInitializedAsync()
    {
        _dotNetHelper = DotNetObjectReference.Create(this);
       
        UpdateDisplay();
       
        await JsRuntime.InvokeVoidAsync("blazorInterop.startCountdown", _dotNetHelper, "UpdateTimer", _timerId);
    }

    [JSInvokable]
    public void UpdateTimer()
    {
        UpdateDisplay();
        StateHasChanged();
    }

    private void UpdateDisplay()
    {
        var remaining = Deadline - DateTime.Now;
        _timeRemaining = remaining.TotalSeconds <= 0 ? "Deadline Passed" : $"{(int)remaining.TotalHours:D2}:{remaining.Minutes:D2}:{remaining.Seconds:D2}";
    }

    public async ValueTask DisposeAsync()
    {
        _dotNetHelper?.Dispose();
        await JsRuntime.InvokeVoidAsync("blazorInterop.stopCountdown", _timerId);
    }
}