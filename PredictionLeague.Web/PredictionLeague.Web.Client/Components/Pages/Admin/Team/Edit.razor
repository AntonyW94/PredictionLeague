@page "/admin/teams/edit/{TeamId:int}"

@attribute [Authorize(Roles = RoleNames.Administrator)]

@inject HttpClient Http

@using PredictionLeague.Contracts.Admin.Teams

<PageTitle>Edit Team</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Edit Team</h3>
        @if (_model == null)
        {
            <p class="text-center text-white"><em>Loading team...</em></p>
        }
        else
        {
            <BaseFormComponent TModel="UpdateTeamRequest"
                               Model="_model"
                               SubmitAction="HandleUpdateTeamAsync"
                               SuccessRedirectUrl="/admin/teams"
                               BackUrl="/admin/teams"
                               SuccessAlertMessage="Team updated successfully!"
                               BusyText="Saving...">
                <ChildContent>
                    <div class="mb-3">
                        <label for="name" class="form-label text-white">Team Name</label>
                        <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                        <StyledValidationMessage For="@(() => _model.Name)" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="abbreviation" class="form-label text-white">Abbreviation (3 letters)</label>
                        <InputText id="abbreviation" class="form-control" @bind-Value="_model.Abbreviation" />
                        <StyledValidationMessage For="@(() => _model.Abbreviation)" />
                    </div>

                    <div class="mb-3">
                        <label for="logoUrl" class="form-label text-white">Logo URL</label>
                        <InputText id="logoUrl" class="form-control" @bind-Value="_model.LogoUrl" />
                        <StyledValidationMessage For="@(() => _model.LogoUrl)" />
                    </div>
                </ChildContent>
            </BaseFormComponent>
        }
    </div>
</div>


@code {
    [Parameter] public int TeamId { get; set; }
    private UpdateTeamRequest? _model;
  
    protected override async Task OnInitializedAsync()
    {
        var team = await Http.GetFromJsonAsync<TeamDto>($"api/teams/{TeamId}");
        if (team != null)
        {
            _model = new UpdateTeamRequest
            {
                Name = team.Name,
                LogoUrl = team.LogoUrl
            };
        }
    }

    private Task<HttpResponseMessage> HandleUpdateTeamAsync()
    {
        return Http.PutAsJsonAsync($"api/teams/{TeamId}/update", _model);
    }
}