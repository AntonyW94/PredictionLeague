@page "/admin/teams/create"
@using PredictionLeague.Contracts.Admin.Teams

@attribute [Authorize(Roles = "Administrator")]

@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Create Team</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Create New Team</h3>
        <EditForm Model="_model" OnValidSubmit="HandleCreateTeam">
            <FluentValidationValidator />
            <ApiError Message="@_errorMessage" />

            <div class="mb-3">
                <label for="name" class="form-label text-white">Team Name</label>
                <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                <StyledValidationMessage For="@(() => _model.Name)" />
            </div>

            <div class="mb-3">
                <label for="logoUrl" class="form-label text-white">Logo URL</label>
                <InputText id="logoUrl" class="form-control" @bind-Value="_model.LogoUrl" />
                <StyledValidationMessage For="@(() => _model.LogoUrl)" />
            </div>
            
            <BackAndSaveButtons BackText="Back to Teams" OnBackClick="Back" BusyText="Creating Team..." IsBusy="_isBusy"></BackAndSaveButtons>
        </EditForm>
    </div>
</div>

@code {
    private readonly CreateTeamRequest _model = new();
    private bool _isBusy;
    private string? _errorMessage;

    private async Task HandleCreateTeam()
    {
        _isBusy = true;
        _errorMessage = null;

        var response = await Http.PostAsJsonAsync("api/admin/teams", _model);
        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/admin/teams");
        else
            _errorMessage = "There was an error creating the team.";

        _isBusy = false;
    }

    private void Back() => NavigationManager.NavigateTo("/admin/teams");
}