@page "/admin/teams/create"
@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@using PredictionLeague.Shared.Admin.Teams

<PageTitle>Create Team</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Create New Team</h3>

        <EditForm Model="_model" OnValidSubmit="HandleCreateTeam">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">@_errorMessage</div>
            }

            <div class="mb-3">
                <label for="name" class="form-label text-white">Team Name</label>
                <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                <ValidationMessage For="@(() => _model.Name)" />
            </div>

            <div class="mb-3">
                <label for="logoUrl" class="form-label text-white">Logo URL</label>
                <InputText id="logoUrl" class="form-control" @bind-Value="_model.LogoUrl" />
                <ValidationMessage For="@(() => _model.LogoUrl)" />
            </div>

            <div class="d-flex justify-content-between mt-4">
                <button type="submit" class="btn" disabled="@_isBusy" style="background-color: var(--pl-green); border-color: var(--pl-green); color: var(--pl-purple); font-weight: 700;">
                    @if (_isBusy)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Creating...</span>
                    }
                    else
                    {
                        <span>Create Team</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .page-container {
        background-color: var(--pl-purple);
        min-height: calc(100vh - 56px);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }

    .form-container {
        background-color: var(--pl-light-purple);
        padding: 2.5rem;
        border-radius: 8px;
        width: 100%;
        max-width: 600px;
    }

    .validation-message {
        color: var(--pl-pink);
    }
</style>

@code {
    private CreateTeamRequest _model = new();
    private bool _isBusy;
    private string? _errorMessage;

    private async Task HandleCreateTeam()
    {
        _isBusy = true;
        _errorMessage = null;

        var response = await Http.PostAsJsonAsync("api/admin/teams", _model);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/admin/teams");
        }
        else
        {
            _errorMessage = "There was an error creating the team.";
        }
        _isBusy = false;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/admin/teams");
    }
}