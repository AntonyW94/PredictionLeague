@page "/admin/seasons/{SeasonId:int}/rounds/create"

@attribute [Authorize(Roles = RoleNames.Administrator)]

@inject HttpClient Http

@using PredictionLeague.Contracts.Admin.Matches
@using PredictionLeague.Contracts.Admin.Rounds
@using PredictionLeague.Contracts.Admin.Teams

<PageTitle>Create Round</PageTitle>

<div class="page-container">
    <div class="form-container extra-wide">
        <h3 class="text-center fw-bold text-white mb-4">Create Round</h3>

        <ApiError Message="@_errorMessage" />

        @if (_model == null)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <BaseFormComponent TModel="CreateRoundRequest"
                               Model="_model"
                               SubmitAction="HandleCreateRoundAsync"
                               SuccessRedirectUrl="@($"/admin/seasons/{SeasonId}/rounds")"
                               BackUrl="@($"/admin/seasons/{SeasonId}/rounds")"
                               SuccessAlertMessage="Round created successfully!"
                               BusyText="Creating Round...">
                <ChildContent>
                  
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="roundNumber" class="form-label text-white">Round Number</label>
                            <InputNumber id="roundNumber" class="form-control" @bind-Value="_model.RoundNumber" />
                            <StyledValidationMessage For="@(() => _model.RoundNumber)" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="startDate" class="form-label text-white">Round Start Date</label>
                            <div class="input-group">
                                <InputDate Type="InputDateType.DateTimeLocal" id="startDate" class="form-control" @bind-Value="_model.StartDate" />
                                <button type="button" class="btn btn-secondary" @onclick="ApplyStartDateToMatches" title="Apply this date to all matches">
                                    <i class="bi bi-arrow-down-square-fill"></i>
                                </button>
                            </div>
                            <StyledValidationMessage For="@(() => _model.StartDate)" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="deadline" class="form-label text-white">Prediction Deadline</label>
                            <InputDate Type="InputDateType.DateTimeLocal" id="deadline" class="form-control" @bind-Value="_model.Deadline" />
                            <StyledValidationMessage For="@(() => _model.Deadline)" />
                        </div>
                    </div>

                    <hr class="text-white" />

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="text-white mb-0">Matches</h4>
                        <button type="button" class="btn btn-sm d-flex align-items-center green-button" @onclick="AddMatch">
                            <span class="bi bi-plus-circle-fill"></span>
                            <span class="d-none d-md-inline ms-2">Add Match</span>
                        </button>
                    </div>

                    @for (var i = 0; i < _model.Matches.Count; i++)
                    {
                        var matchIndex = i;
                        <div class="match-editor-row">
                            <!-- Desktop View -->
                            <div class="row gx-2 align-items-center d-none d-md-flex">
                                <div class="col-md-3"><InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="_model.Matches[matchIndex].MatchDateTime" /></div>
                                <div class="col">
                                    <InputSelect class="form-select" @bind-Value="_model.Matches[matchIndex].HomeTeamId">
                                        <option value="0">Home</option>
                                        @foreach (var t in _teams)
                                        {
                                            <option value="@t.Id">@t.Name</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-auto"><div class="logo-wrapper @(_model.Matches[matchIndex].HomeTeamId > 0 ? "visible" : "")"><img src="@GetTeamLogoUrl(_model.Matches[matchIndex].HomeTeamId)" class="match-logo" alt="Home Team Logo" /></div></div>

                                <div class="col-auto text-white fw-bold">vs</div>

                                <div class="col-auto"><div class="logo-wrapper @(_model.Matches[matchIndex].AwayTeamId > 0 ? "visible" : "")"><img src="@GetTeamLogoUrl(_model.Matches[matchIndex].AwayTeamId)" class="match-logo" alt="Away Team Logo" /></div></div>

                                <div class="col">
                                    <InputSelect class="form-select" @bind-Value="_model.Matches[matchIndex].AwayTeamId">
                                        <option value="0">Away</option>
                                        @foreach (var t in _teams)
                                        {
                                            <option value="@t.Id">@t.Name</option>
                                        }
                                    </InputSelect>
                                </div>

                                <div class="col-auto"><button type="button" class="btn btn-sm red-button" @onclick="() => RemoveMatch(matchIndex)"><span class="bi bi-trash"></span></button></div>
                            </div>

                            <!-- Mobile Card View -->
                            <div class="d-md-none match-card">
                                <div class="d-flex justify-content-between align-items-center match-card-header">
                                    <span class="fw-bold">Match @(matchIndex + 1)</span>
                                    <button type="button" class="btn btn-sm red-button" @onclick="() => RemoveMatch(matchIndex)"><span class="bi bi-trash"></span></button>
                                </div>

                                <div class="p-3">
                                    <div class="mb-2">
                                        <label class="form-label text-white-50">Date</label>
                                        <InputDate Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="_model.Matches[matchIndex].MatchDateTime" />
                                    </div>

                                    <div class="mb-2">
                                        <label class="form-label text-white-50">Home Team</label>
                                        <InputSelect class="form-select" @bind-Value="_model.Matches[matchIndex].HomeTeamId">
                                            <option value="0">Home</option>
                                            @foreach (var t in _teams)
                                            {
                                                <option value="@t.Id">@t.Name</option>
                                            }
                                        </InputSelect>
                                    </div>

                                    <div class="mb-2">
                                        <label class="form-label text-white-50">Away Team</label>
                                        <InputSelect class="form-select" @bind-Value="_model.Matches[matchIndex].AwayTeamId">
                                            <option value="0">Away</option>
                                            @foreach (var t in _teams)
                                            {
                                                <option value="@t.Id">@t.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </ChildContent>
            </BaseFormComponent>
        }
    </div>
</div>

@code {
    [Parameter]
    public int SeasonId { get; set; }

    private CreateRoundRequest? _model;
    private List<TeamDto> _teams = new();
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _errorMessage = null;

        try
        {
            var now = DateTime.Now;

            _model = new CreateRoundRequest
            {
                SeasonId = SeasonId,
                StartDate = now.Date,
                Deadline = now,
                Matches = new List<CreateMatchRequest>()
            };

            for (var i = 0; i < 10; i++)
            {
                _model.Matches.Add(new CreateMatchRequest { MatchDateTime = now });
            }

            _teams = await Http.GetFromJsonAsync<List<TeamDto>>("api/teams") ?? new List<TeamDto>();
        }
        catch (Exception)
        {
            _errorMessage = "Could not load create round page.";
        }
    }

    private void ApplyStartDateToMatches()
    {
        if (_model == null) 
            return;

        var newDate = _model.StartDate;
        foreach (var match in _model.Matches)
        {
            match.MatchDateTime = newDate;
        }

        _model.Deadline = _model.StartDate.AddHours(-1);
    }

    private void AddMatch() => _model?.Matches.Add(new CreateMatchRequest { MatchDateTime = _model.StartDate });

    private void RemoveMatch(int index)
    {
        if (index >= 0 && index < _model?.Matches.Count)
            _model.Matches.RemoveAt(index);
    }

    private string? GetTeamLogoUrl(int teamId)
    {
        return teamId < 1 ? "https://placehold.co/25x25/transparent/transparent?text=" : _teams.FirstOrDefault(t => t.Id == teamId)?.LogoUrl;
    }

    private Task<HttpResponseMessage> HandleCreateRoundAsync()
    {
        return Http.PostAsJsonAsync("api/admin/rounds/create", _model);
    }
}