@page "/admin/rounds/{RoundId:int}/submit-results"
@attribute [Authorize(Roles = "Administrator")]

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using PredictionLeague.Shared.Admin.Results
@using PredictionLeague.Shared.Admin.Rounds

<PageTitle>Enter Results - Round @_roundNumber</PageTitle>

<div class="page-container">
    <div class="form-container extra-wide">
        <h3 class="text-center fw-bold text-white mb-4">Enter Results for Round @_roundNumber</h3>

        @if (_isLoading)
        {
            <p class="text-center text-white"><em>Loading matches...</em></p>
        }
        else if (_matches != null)
        {
            <EditForm Model="_matches" OnValidSubmit="HandleSaveResults">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger">@_errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success">@_successMessage</div>
                }

                <div class="prediction-grid">
                    @foreach (var match in _matches)
                    {
                        <div class="prediction-card">
                            <div class="prediction-card-header">
                                @match.MatchDateTime.ToString("dddd dd MMMM, HH:mm")
                            </div>
                            <div class="prediction-card-body">
                                <div class="team-display">
                                    <img src="@match.HomeTeamLogoUrl" class="match-logo" alt="Home Team Logo" />
                                    <span class="team-name d-none d-sm-block">@match.HomeTeamName</span>
                                </div>

                                <div class="score-input-group">
                                    <div class="score-input-stepper">
                                        <button type="button" class="stepper-btn" @onclick="() => UpdateScore(match, true, 1)">
                                            <span class="bi bi-caret-up-fill"></span>
                                        </button>

                                        <div class="score-value">@match.ActualHomeScore</div>

                                        <button type="button" class="stepper-btn" @onclick="() => UpdateScore(match, true, -1)">
                                            <span class="bi bi-caret-down-fill"></span>
                                        </button>
                                    </div>

                                    <span class="vs-separator">-</span>

                                    <div class="score-input-stepper">
                                        <button type="button" class="stepper-btn" @onclick="() => UpdateScore(match, false, 1)">
                                            <span class="bi bi-caret-up-fill"></span>
                                        </button>
                                        <div class="score-value">@match.ActualAwayScore</div>
                                        <button type="button" class="stepper-btn" @onclick="() => UpdateScore(match, false, -1)">
                                            <span class="bi bi-caret-down-fill"></span>
                                        </button>
                                    </div>
                                </div>

                                <div class="team-display">
                                    <img src="@match.AwayTeamLogoUrl" class="match-logo" alt="Away Team Logo" />
                                    <span class="team-name d-none d-sm-block">@match.AwayTeamName</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <BackAndSaveButtons BackText="Back to Rounds" OnBackClick="Back" BusyText="Saving..." IsBusy="_isBusy"></BackAndSaveButtons>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int RoundId { get; set; }

    private List<MatchResultDto>? _matches;
    private int _seasonId;
    private int _roundNumber;
    private bool _isLoading = true;
    private bool _isBusy;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var roundDetails = await Http.GetFromJsonAsync<RoundDetailsDto>($"api/admin/rounds/{RoundId}");
            if (roundDetails != null)
            {
                _seasonId = roundDetails.Round.SeasonId;
                _roundNumber = roundDetails.Round.RoundNumber;
                _matches = roundDetails.Matches.Select(m => new MatchResultDto
                {
                    Id = m.Id,
                    MatchDateTime = m.MatchDateTime,
                    HomeTeamName = m.HomeTeamName,
                    HomeTeamLogoUrl = m.HomeTeamLogoUrl,
                    AwayTeamName = m.AwayTeamName,
                    AwayTeamLogoUrl = m.AwayTeamLogoUrl,
                    ActualHomeScore = m.ActualHomeScore,
                    ActualAwayScore = m.ActualAwayScore
                }).ToList();
            }
        }
        catch (Exception)
        {
            _errorMessage = "Could not load round details.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static void UpdateScore(MatchResultDto match, bool isHomeTeam, int delta)
    {
        if (isHomeTeam)
        {
            var currentScore = match.ActualHomeScore ?? 0;
           
            var newScore = currentScore + delta;
            if (newScore >= 0 && newScore <= 9)
                match.ActualHomeScore = newScore;
        }
        else
        {
            var currentScore = match.ActualAwayScore ?? 0;
            
            var newScore = currentScore + delta;
            if (newScore >= 0 && newScore <= 9)
                match.ActualAwayScore = newScore;
        }
    }

    private async Task HandleSaveResults()
    {
        _isBusy = true;
        _errorMessage = null;
        _successMessage = null;

        var resultsToUpdate = _matches!
            .Select(m => new UpdateMatchResultsRequest
            {
                MatchId = m.Id,
                HomeScore = m.ActualHomeScore ?? 0,
                AwayScore = m.ActualAwayScore ?? 0
            }).ToList();

        var response = await Http.PutAsJsonAsync($"api/admin/rounds/{RoundId}/submit-results", resultsToUpdate);
        if (response.IsSuccessStatusCode)
            _successMessage = "Results saved and points calculated successfully!";
        else
            _errorMessage = "There was an error saving the results.";

        _isBusy = false;
    }

    private void Back()
    {
        NavigationManager.NavigateTo($"/admin/seasons/{_seasonId}/rounds");
    }
}
