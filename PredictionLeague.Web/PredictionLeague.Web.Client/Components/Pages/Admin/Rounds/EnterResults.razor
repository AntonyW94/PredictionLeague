@page "/admin/rounds/{RoundId:int}/results"

@attribute [Authorize(Roles = RoleNames.Administrator)]

@inject EnterResultsViewModel ViewModel

@using PredictionLeague.Domain.Common.Enumerations
@using PredictionLeague.Web.Client.ViewModels.Admin.Rounds

<PageTitle>Enter Results - Round @ViewModel.RoundNumber</PageTitle>

<div class="page-container">
    <div class="form-container extra-wide">
        <h3 class="text-center fw-bold text-white mb-4">Enter Results for Round @ViewModel.RoundNumber</h3>

        @if (ViewModel.IsLoading)
        {
            <p class="text-center text-white"><em>Loading matches...</em></p>
        }
        else if (ViewModel.Matches.Any())
        {
            <EditForm Model="ViewModel.Matches" OnValidSubmit="() => ViewModel.HandleSaveResultsAsync(RoundId)">
                <FluentValidationValidator />
                <ApiError Message="@ViewModel.ErrorMessage" />
                <ApiSuccess Message="@ViewModel.SuccessMessage" />

                <div class="prediction-grid">
                    @foreach (var match in ViewModel.Matches)
                    {
                        <div class="prediction-card">
                            <div class="prediction-card-header">
                                <h6 class="card-title text-white fw-bold centre mb-2">@match.MatchDateTime.ToString("dddd dd MMMM, HH:mm")</h6>

                                @{
                                    var statusClass = $"form-select-sm status-select-pill {GetStatusSelectClass(match.Status)}";
                                }
                                <InputSelect class="@statusClass" @bind-Value="match.Status">
                                    @foreach (MatchStatus status in Enum.GetValues(typeof(MatchStatus)))
                                    {
                                        <option value="@status">@status.GetDescription()</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="prediction-card-body">
                                <div class="team-display">
                                    <img src="@match.HomeTeamLogoUrl" class="match-logo" alt="Home Team Logo" />
                                    <span class="team-name d-none d-sm-block">@match.HomeTeamName</span>
                                </div>

                                <div class="score-input-group">
                                    <div class="score-input-stepper">
                                        <button type="button" class="stepper-btn" @onclick="() => match.UpdateScore(true, 1)">
                                            <span class="bi bi-caret-up-fill"></span>
                                        </button>
                                        <div class="score-value">@match.HomeScore</div>
                                        <button type="button" class="stepper-btn" @onclick="() => match.UpdateScore(true, -1)">
                                            <span class="bi bi-caret-down-fill"></span>
                                        </button>
                                    </div>

                                    <span class="vs-separator">-</span>

                                    <div class="score-input-stepper">
                                        <button type="button" class="stepper-btn" @onclick="() => match.UpdateScore(false, 1)">
                                            <span class="bi bi-caret-up-fill"></span>
                                        </button>
                                        <div class="score-value">@match.AwayScore</div>
                                        <button type="button" class="stepper-btn" @onclick="() => match.UpdateScore(false, -1)">
                                            <span class="bi bi-caret-down-fill"></span>
                                        </button>
                                    </div>
                                </div>

                                <div class="team-display">
                                    <img src="@match.AwayTeamLogoUrl" class="match-logo" alt="Away Team Logo" />
                                    <span class="team-name d-none d-sm-block">@match.AwayTeamName</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <BackAndSaveButtons BackText="Back to Rounds" OnBackClick="ViewModel.BackToRounds" BusyText="Saving..." IsBusy="ViewModel.IsBusy"></BackAndSaveButtons>
            </EditForm>
        }
        else
        {
            <p class="text-center text-white">There are no matches for this round.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public int RoundId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadRoundDetails(RoundId);
    }

    private static string GetStatusSelectClass(MatchStatus status)
    {
        return status switch
        {
            MatchStatus.Scheduled => "scheduled",
            MatchStatus.InProgress => "in-progress",
            MatchStatus.Completed => "completed",
            _ => ""
        };
    }
}