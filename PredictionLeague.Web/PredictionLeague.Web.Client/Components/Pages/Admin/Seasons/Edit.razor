@page "/admin/seasons/edit/{SeasonId:int}"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using PredictionLeague.Shared.Admin.Seasons

<PageTitle>Edit Season</PageTitle>

<div class="my-details-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Edit Season</h3>
        @if (_model == null)
        {
            <p class="text-center text-white"><em>Loading season...</em></p>
        }
        else
        {
            <EditForm Model="_model" OnValidSubmit="HandleUpdateSeason">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger">@_errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success">@_successMessage</div>
                }

                <div class="mb-3">
                    <label for="name" class="form-label text-white">Season Name</label>
                    <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                </div>
                <div class="mb-3">
                    <label for="startDate" class="form-label text-white">Start Date</label>
                    <InputDate id="startDate" class="form-control" @bind-Value="_model.StartDate" />
                </div>
                <div class="mb-3">
                    <label for="endDate" class="form-label text-white">End Date</label>
                    <InputDate id="endDate" class="form-control" @bind-Value="_model.EndDate" />
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox id="isActive" class="form-check-input" @bind-Value="_model.IsActive" />
                    <label for="isActive" class="form-check-label text-white">Is Active Season</label>
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn" disabled="@_isBusy" style="background-color: var(--pl-green); color: var(--pl-purple);">Save Changes</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </EditForm>
        }
    </div>
</div>

<style>
    .my-details-container {
        background-color: var(--pl-purple);
        min-height: calc(100vh - 56px);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .form-container {
        background-color: var(--pl-light-purple);
        padding: 2.5rem;
        border-radius: 8px;
        width: 100%;
        max-width: 600px;
    }

    .validation-message {
        color: var(--pl-pink);
    }
</style>

@code {
    [Parameter] public int SeasonId { get; set; }
    private UpdateSeasonRequest? _model;
    private bool _isBusy;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        var season = await Http.GetFromJsonAsync<SeasonDto>($"api/seasons/{SeasonId}");
        if (season != null)
        {
            _model = new UpdateSeasonRequest { Name = season.Name, StartDate = season.StartDate, EndDate = season.EndDate, IsActive = season.IsActive };
        }
    }

    private async Task HandleUpdateSeason()
    {
        _isBusy = true;
        _errorMessage = null;
        _successMessage = null;
        var response = await Http.PutAsJsonAsync($"api/admin/seasons/{SeasonId}", _model);
        if (response.IsSuccessStatusCode)
        {
            _successMessage = "Season updated successfully!";
            await Task.Delay(1500);
            NavigationManager.NavigateTo("/admin/seasons");
        }
        else { _errorMessage = "Error updating season."; }
        _isBusy = false;
    }

    private void Cancel() => NavigationManager.NavigateTo("/admin/seasons");
}