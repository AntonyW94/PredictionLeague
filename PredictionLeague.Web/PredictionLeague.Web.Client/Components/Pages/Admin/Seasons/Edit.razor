@page "/admin/seasons/edit/{SeasonId:int}"

@attribute [Authorize(Roles = RoleNames.Administrator)]

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using PredictionLeague.Contracts.Admin.Seasons

<PageTitle>Edit Season</PageTitle>

<div class="page-container">
    <div class="form-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold text-white mb-0">Edit Season</h3>
        </div>

        @if (_model == null)
        {
            <p class="text-center text-white"><em>Loading season...</em></p>
        }
        else
        { 
            <BaseFormComponent TModel="UpdateSeasonRequest"
                              Model="_model"
                              SubmitAction="HandleUpdateSeasonAsync"
                              SuccessRedirectUrl="/admin/seasons"
                              BackUrl="/admin/seasons"
                              SuccessAlertMessage="Season updated successfully!"
                              BusyText="Saving...">
                <ChildContent>
                    <div class="row">
                        <div class="col-md-8 mb-3">
                            <label for="name" class="form-label text-white">Season Name</label>
                            <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                            <StyledValidationMessage For="@(() => _model.Name)" />
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="numberOfRounds" class="form-label text-white">Rounds</label>
                            <InputNumber id="numberOfRounds" class="form-control" @bind-Value="_model.NumberOfRounds" />
                            <StyledValidationMessage For="@(() => _model.NumberOfRounds)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="startDate" class="form-label text-white">Start Date</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="_model.StartDate" />
                    </div>

                    <div class="mb-3">
                        <label for="endDate" class="form-label text-white">End Date</label>
                        <InputDate id="endDate" class="form-control" @bind-Value="_model.EndDate" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label text-white">Rounds</label>
                        <div class="d-flex align-items-center">
                            <span class="badge fs-6 me-3" style="background-color: var(--pl-purple)">@_roundCount</span>
                            <button type="button" class="btn btn-sm dark-pink-button me-2" @onclick="() => ViewRounds(SeasonId)" title="View Rounds">
                                <span class="bi bi-eye-fill"></span>
                            </button>
                            <button type="button" class="btn btn-sm light-cyan-button" @onclick="() => AddRound(SeasonId)" title="Add Round">
                                <span class="bi bi-plus-circle-fill"></span>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="_model.IsActive" />
                        <label for="isActive" class="form-check-label text-white">Active</label>
                    </div>
                </ChildContent>
            </BaseFormComponent>
        }
    </div>
</div>

@code {
    [Parameter] public int SeasonId { get; set; }
    private UpdateSeasonRequest? _model;
    private int _roundCount;

    protected override async Task OnInitializedAsync()
    {
        var seasonDto = await Http.GetFromJsonAsync<SeasonDto>($"api/seasons/{SeasonId}");
        if (seasonDto != null)
        {
            _model = new UpdateSeasonRequest
            {
                Name = seasonDto.Name,
                StartDate = seasonDto.StartDate,
                EndDate = seasonDto.EndDate,
                IsActive = seasonDto.IsActive,
                NumberOfRounds = seasonDto.NumberOfRounds
            };
            _roundCount = seasonDto.RoundCount;
        }
    }

    private Task<HttpResponseMessage> HandleUpdateSeasonAsync()
    {
        return Http.PutAsJsonAsync($"api/seasons/{SeasonId}/update", _model);
    }

    private void AddRound(int seasonId) => NavigationManager.NavigateTo($"/admin/seasons/{seasonId}/create-round");
    private void ViewRounds(int seasonId) => NavigationManager.NavigateTo($"/admin/seasons/{seasonId}/rounds");
}