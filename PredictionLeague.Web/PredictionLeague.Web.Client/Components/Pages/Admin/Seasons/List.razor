@page "/admin/seasons"

@attribute [Authorize(Roles = RoleNames.Administrator)]

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using PredictionLeague.Contracts.Admin.Seasons

<PageTitle>Manage Seasons</PageTitle>

<div class="page-container">
    <div class="admin-table-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold text-white mb-0">Manage Seasons</h3>
            <button class="btn d-flex align-items-center green-button" @onclick='() => NavigationManager.NavigateTo("/admin/seasons/create")'>
                <span class="bi bi-plus-circle-fill"></span>
                <span class="d-none d-md-inline ms-2">Create Season</span>
            </button>
        </div>

        <ApiError Message="@_errorMessage" />

        @if (_seasons == null)
        {
            <p class="text-center text-white"><em>Loading...</em></p>
        }
        else
        {
            <div class="card-grid">
                @foreach (var season in _seasons)
                {
                    <div class="action-card light">
                        <div class="card-header">
                            <h5 class="fw-bold text-white mb-0">@season.Name</h5>
                        </div>

                        <div class="action-card-body">
                            <div class="action-card-row">
                                <dt>Active</dt>
                                <dd>
                                    <div class="form-check form-switch ms-0">
                                        <input type="checkbox" class="form-check-input"
                                               checked="@season.IsActive"
                                               @onchange="() => ToggleIsActive(season)"
                                               title="Toggle Active Status"/>
                                    </div>
                                </dd>
                            </div>

                            <div class="action-card-row">
                                <dt>Rounds</dt>
                                <dd>@season.RoundCount / @season.NumberOfRounds</dd>
                            </div>

                            <div class="action-card-row">
                                <dt>Starts</dt>
                                <dd>@season.StartDate.ToString("dd MMM yyyy")</dd>
                            </div>

                            <div class="action-card-row">
                                <dt>Ends</dt>
                                <dd>@season.EndDate.ToString("dd MMM yyyy")</dd>
                            </div>
                        </div>

                        <div class="action-card-footer">
                            @if (season.RoundCount < season.NumberOfRounds)
                            {
                                <button class="btn blue-light-button flex-grow-1" @onclick="() => AddRound(season.Id)">
                                    <span class="bi bi-plus-circle-fill me-2"></span>Add Round
                                </button>
                            }

                            <button class="btn purple-accent-button flex-grow-1" @onclick="() => ManageRounds(season.Id)">
                                <span class="bi bi-calendar3-range me-2"></span>Manage Rounds
                            </button>

                            <button class="btn green-button" @onclick="() => EditSeason(season.Id)">
                                <span class="bi bi-pencil-fill me-2"></span>Edit Season
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<SeasonDto>? _seasons;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadSeasons();
    }

    private async Task LoadSeasons()
    {
        _errorMessage = null;
        try
        {
            _seasons = await Http.GetFromJsonAsync<List<SeasonDto>>("api/seasons");
        }
        catch (Exception)
        {
            _errorMessage = "An error occurred while loading seasons.";
        }
    }

    private async Task ToggleIsActive(SeasonDto seasonToUpdate)
    {
        _errorMessage = null;
        bool newStatus = !seasonToUpdate.IsActive;

        var index = _seasons!.IndexOf(seasonToUpdate);
        var updatedSeason = seasonToUpdate with { IsActive = newStatus };
        _seasons[index] = updatedSeason;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/seasons/{seasonToUpdate.Id}/status", newStatus);
            if (!response.IsSuccessStatusCode)
            {
                _errorMessage = "Failed to update season status.";
                _seasons[index] = seasonToUpdate; // Revert on failure
            }
        }
        catch
        {
            _errorMessage = "An unexpected error occurred.";
            _seasons[index] = seasonToUpdate; // Revert on failure
        }
        StateHasChanged();
    }

    private void EditSeason(int seasonId) => NavigationManager.NavigateTo($"/admin/seasons/edit/{seasonId}");
    private void ManageRounds(int seasonId) => NavigationManager.NavigateTo($"/admin/seasons/{seasonId}/rounds");
    private void AddRound(int seasonId) => NavigationManager.NavigateTo($"/admin/seasons/{seasonId}/rounds/create");
}