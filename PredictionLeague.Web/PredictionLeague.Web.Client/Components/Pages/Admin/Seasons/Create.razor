@page "/admin/seasons/create"

@attribute [Authorize(Roles = "Administrator")]

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization
@using PredictionLeague.Shared.Admin.Seasons

<PageTitle>Create Season</PageTitle>

<div class="page-container">
    <div class="form-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold text-white mb-0">Create New Season</h3>
        </div>

        <EditForm Model="_model" OnValidSubmit="HandleCreateSeason">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">@_errorMessage</div>
            }
            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success" role="alert">@_successMessage</div>
            }

            <div class="mb-3">
                <label for="name" class="form-label text-white">Season Name</label>
                <InputText id="name" class="form-control" @bind-Value="_model.Name" placeholder="e.g., 2024/2025" />
                <ValidationMessage For="@(() => _model.Name)" />
            </div>

            <div class="mb-3">
                <label for="startDate" class="form-label text-white">Start Date</label>
                <InputDate id="startDate" class="form-control" @bind-Value="_model.StartDate" />
                <ValidationMessage For="@(() => _model.StartDate)" />
            </div>

            <div class="mb-3">
                <label for="endDate" class="form-label text-white">End Date</label>
                <InputDate id="endDate" class="form-control" @bind-Value="_model.EndDate" />
                <ValidationMessage For="@(() => _model.EndDate)" />
            </div>

            <div class="d-flex justify-content-between mt-4">
                <button type="button" class="btn pink-button d-flex align-items-center" @onclick="Back">
                    <span class="bi bi-arrow-left-circle-fill me-2"></span>Back to Seasons
                </button>

                <button type="submit" class="btn green-button d-flex align-items-center" disabled="@_isBusy">
                    @if (_isBusy)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                        <span> Creating Season...</span>
                    }
                    else
                    {
                        <span class="bi bi-check-circle-fill me-2"></span>
                        <span>Save</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateSeasonRequest _model = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddMonths(9)
    };

    private bool _isBusy;
    private string? _errorMessage;
    private string? _successMessage;

    private async Task HandleCreateSeason()
    {
        _isBusy = true;
        _errorMessage = null;
        _successMessage = null;

        var response = await Http.PostAsJsonAsync("api/admin/season", _model);
        if (response.IsSuccessStatusCode)
        {
            _successMessage = "Season created successfully!";
            _model = new()
            {
                StartDate = DateTime.Today,
                EndDate = DateTime.Today.AddMonths(9)
            };
        }
        else
        {
            _errorMessage = "There was an error creating the season.";
        }

        _isBusy = false;
    }

    private void Back() => NavigationManager.NavigateTo("/admin/seasons");

}
