@inject ILeagueService LeagueService

@inherits BaseLeaderboardComponent

@using PredictionLeague.Contracts.Leaderboards
@using PredictionLeague.Web.Client.Services.Leagues

<div class="card w-100 mh-600">
    <h5 class="card-title text-white fw-bold mb-3">Exact Scores</h5>
    <div class="card-body no-padding justify-start">
        <ApiError Message="@_errorMessage" />

        @if (_isLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (_leaderboard?.Entries is { Count: > 0 } entries)
        {
            <div class="table-responsive">
                <table class="leaderboard-table text-white">
                    <thead>
                        <tr>
                            <th class="rank-col">#</th>
                            <th class="player-name-col">Player</th>
                            <th class="points-col">Amt</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in entries)
                        {
                            <tr class="@(GetUserHighlightClass(entry.UserId))">
                                <td class="rank-col fw-bold">@entry.Rank</td>
                                <td class="player-name-col fw-bold">@entry.PlayerName</td>
                                <td class="points-col fw-bold">@entry.ExactScoresCount</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-white">No exact scores recorded yet.</p>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public int LeagueId { get; set; }


    private ExactScoresLeaderboardDto? _leaderboard;
    private bool _isLoading = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            _leaderboard = await LeagueService.GetExactScoresLeaderboardAsync(LeagueId);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;// "Could not load the leaderboard. Please try again later.";
        }
        finally
        {
            _isLoading = false;
        }
    }
}