@inject ILeagueService LeagueService

@using PredictionLeague.Contracts.Leaderboards
@using PredictionLeague.Web.Client.Services.Leagues

<div class="card w-100">
    <h5 class="card-title text-white fw-bold mb-3">Overall Leaderboard</h5>
    <div class="card-body no-padding">
        @if (_isLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="p-3">
                <ApiError Message="@_errorMessage" />
            </div>
        }
        else if (_leaderboardEntries != null && _leaderboardEntries.Any())
        {
            <div class="table-responsive">
                <table class="leaderboard-table text-white">
                    <thead>
                        <tr>
                            <th class="rank-col">#</th>
                            <th class="player-name-col">Player</th>
                            <th class="points-col">Pts</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in _leaderboardEntries)
                        {
                            <tr>
                                <td class="rank-col fw-bold">@entry.Rank</td>
                                <td class="player-name-col fw-bold">@entry.PlayerName</td>
                                <td class="points-col fw-bold">@entry.TotalPoints</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-center text-white-50 mt-4">No predictions have been scored yet.</p>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public int LeagueId { get; set; }

    private IEnumerable<LeaderboardEntryDto>? _leaderboardEntries;
    private bool _isLoading = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _leaderboardEntries = await LeagueService.GetOverallLeaderboardAsync(LeagueId);
        }
        catch (Exception)
        {
            _errorMessage = "Could not load the leaderboard. Please try again later.";
        }
        finally
        {
            _isLoading = false;
        }
    }
}