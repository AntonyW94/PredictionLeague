@inject LeagueDashboardStateService State

@implements IAsyncDisposable

@using PredictionLeague.Web.Client.Services.Leagues

<div class="dashboard-card">
    <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-center mb-3 text-center text-md-start">
        <h5 class="text-white fw-bold mb-3 mb-md-0">Round Results</h5>

        @if (State.ViewableRounds.Any())
        {
            <div class="w-100" style="max-width:200px;">
                <InputSelect TValue="int?" class="form-select form-select-sm" @bind-Value="State.SelectedRoundId" @bind-Value:after="OnRoundSelected">
                    @foreach (var round in State.ViewableRounds)
                    {
                        <option value="@round.Id">Round @round.RoundNumber</option>
                    }
                </InputSelect>
            </div>
        }
    </div>

    <ApiError Message="@State.RoundResultsError" />

    @if (State.IsLoadingRoundResults)
    {
        <p class="text-center text-white"><em>Loading results...</em></p>
    }
    else if (State.CurrentRoundResults.Any())
    {
        <PredictionGrid Results="State.CurrentRoundResults" Matches="State.CurrentRoundMatches" />
    }
    else
    {
        <p class="text-center text-white-50">No results to display for this round.</p>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public int LeagueId { get; set; }
  

    protected override void OnInitialized()
    {
        State.OnStateChange += StateHasChanged;
    }
    
    private async Task OnRoundSelected()
    {
        if (State.SelectedRoundId > 0)
            await State.LoadRoundResults(LeagueId, State.SelectedRoundId.Value);
    }

    public ValueTask DisposeAsync()
    {
        State.OnStateChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}