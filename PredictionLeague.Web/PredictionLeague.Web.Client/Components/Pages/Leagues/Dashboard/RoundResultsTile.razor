@inject LeagueDashboardStateService State

@implements IAsyncDisposable

@inherits BaseLeaderboardComponent

@using PredictionLeague.Contracts.Leagues
@using PredictionLeague.Domain.Common.Enumerations
@using PredictionLeague.Web.Client.Services.Leagues

<div class="card">
    <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-center mb-3 text-center text-md-start">
        <h5 class="text-white fw-bold mb-3 mb-md-0">Round Results</h5>

        @if (State.ViewableRounds.Any())
        {
            <div class="w-100" style="max-width:200px;">
                <InputSelect TValue="int?" class="form-select form-select-sm" @bind-Value="State.SelectedRoundId" @bind-Value:after="OnRoundSelected">
                    @foreach (var round in State.ViewableRounds)
                    {
                        <option value="@round.Id">Round @round.RoundNumber</option>
                    }
                </InputSelect>
            </div>
        }
    </div>

    <ApiError Message="@State.RoundResultsError" />

    @if (State.IsLoadingRoundResults)
    {
        <p class="text-center text-white"><em>Loading results...</em></p>
    }
    else if (State.CurrentRoundResults.Any())
    {
        var selectedRound = State.ViewableRounds.FirstOrDefault(r => r.Id == State.SelectedRoundId);
        if (selectedRound != null)
        {
            <div class="d-none d-lg-block">
                <PredictionGrid Results="State.CurrentRoundResults"
                                Matches="State.CurrentRoundMatches"
                                Deadline="selectedRound.Deadline" />
            </div>

            <div class="d-lg-none">
                <div class="mobile-results-view">
                    <div class="carousel-wrapper mobile-results-carousel">
                        <div class="carousel-container" @ontouchstart="HandleTouchStart" @ontouchmove="HandleTouchMove" @ontouchend="HandleTouchEnd">
                            <div class="carousel-track" style="@_trackStyle">
                                @foreach (var match in State.CurrentRoundMatches)
                                {
                                    <div class="carousel-item-wrapper">
                                        <div class="carousel-item-content">
                                            <MobileMatchResultCard Match="match"
                                                                   Results="State.CurrentRoundResults"
                                                                   Deadline="selectedRound.Deadline" />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="carousel-dots">
                            @for (var i = 0; i < State.CurrentRoundMatches.Count; i++)
                            {
                                var index = i;
                                <span class="carousel-dot @(index == _currentIndex ? "active" : "")" @onclick="() => GoToSlide(index)"></span>
                            }
                        </div>
                    </div>

                    <div class="leaderboard-card mt-4 mh-600">
                        <div class="card-header w-100">
                            <h6 class="card-title text-white fw-bold mb-0 text-center">Round @(State.ViewableRounds.FirstOrDefault(r => r.Id == State.SelectedRoundId)?.RoundNumber) Points</h6>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="leaderboard-table light text-white">
                                    <thead>
                                        <tr>
                                            <th class="rank-col fw-bold">#</th>
                                            <th class="player-name-col fw-bold">Player</th>
                                            <th class="points-col fw-bold">Pts</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var player in State.CurrentRoundResults.OrderByDescending(p => p.TotalPoints))
                                        {
                                            <tr class="@(IsWinner(player) ? "overall-round-winner" : "") @(GetUserHighlightClass(player.UserId))">
                                                <td class="rank-col fw-bold">@player.Rank</td>
                                                <td class="player-name-col fw-bold">@player.PlayerName</td>
                                                <td class="points-col fw-bold">@player.TotalPoints</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-center text-white-50">No results to display for this round.</p>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public int LeagueId { get; set; }

    private int _currentIndex;
    private string _trackStyle = "transform: translateX(0%);";
    private double _touchStartX;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        State.OnStateChange += StateHasChanged;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && State.CurrentRoundMatches.Any())
        {
            SetDefaultCarouselSlide();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnRoundSelected()
    {
        if (State.SelectedRoundId > 0)
        {
            await State.LoadRoundResults(LeagueId, State.SelectedRoundId.Value);
            SetDefaultCarouselSlide();
        }
    }

    private void SetDefaultCarouselSlide()
    {
        var matches = State.CurrentRoundMatches;
        if (!matches.Any())
        {
            _currentIndex = 0;
            UpdateTrackStyle();
            return;
        }

        var inProgressIndex = matches.FindIndex(m => m.Status == MatchStatus.InProgress);
        if (inProgressIndex != -1)
        {
            _currentIndex = inProgressIndex;
            UpdateTrackStyle();
            return;
        }

        var scheduledIndex = matches.FindIndex(m => m.Status == MatchStatus.Scheduled);
        if (scheduledIndex != -1)
        {
            _currentIndex = scheduledIndex;
            UpdateTrackStyle();
            return;
        }

        _currentIndex = 0;
        UpdateTrackStyle();
    }

    private bool IsWinner(PredictionResultDto player)
    {
        if (!State.CurrentRoundResults.Any() || State.CurrentRoundResults.All(p => p.TotalPoints == 0))
            return false;

        return player.Rank == 1;
    }

    private void HandleTouchStart(TouchEventArgs e) => _touchStartX = e.Touches[0].ClientX;
    private static void HandleTouchMove(TouchEventArgs e) { }
    private void HandleTouchEnd(TouchEventArgs e)
    {
        var touchEndX = e.ChangedTouches[0].ClientX;
        var diffX = _touchStartX - touchEndX;

        if (!(Math.Abs(diffX) > 50))
            return;

        if (diffX > 0)
        {
            if (_currentIndex >= State.CurrentRoundMatches.Count - 1) 
                return;

            _currentIndex++;
        }
        else
        {
            if (_currentIndex <= 0) 
                return;

            _currentIndex--;
        }

        UpdateTrackStyle();
    }

    private void GoToSlide(int index)
    {
        _currentIndex = index;
        UpdateTrackStyle();
    }

    private void UpdateTrackStyle()
    {
        _trackStyle = $"transform: translateX(-{_currentIndex * 100}%);";
    }

    public ValueTask DisposeAsync()
    {
        State.OnStateChange -= StateHasChanged;
        return ValueTask.CompletedTask;
    }
}