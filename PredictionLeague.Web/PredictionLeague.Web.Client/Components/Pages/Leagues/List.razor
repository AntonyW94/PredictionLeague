@page "/leagues"

@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

@using PredictionLeague.Contracts.Leagues

<PageTitle>Manage Leagues</PageTitle>

<div class="page-container">
    <div class="admin-table-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold text-white mb-0">Manage Leagues</h3>
            <button class="btn d-flex align-items-center green-button" @onclick='() => NavigationManager.NavigateTo("/leagues/create")'>
                <span class="bi bi-plus-circle-fill"></span>
                <span class="d-none d-md-inline ms-2">Create League</span>
            </button>
        </div>

        <ApiError Message="@_errorMessage" />

        @if (_leaguesData == null)
        {
            <p class="text-center text-white"><em>Loading...</em></p>
        }
        else
        {
            <div class="row">
                @if (_isAdmin)
                {
                    <div class="col-lg-4 mb-4">
                        <div class="member-status-column">
                            <h4 class="text-white mb-3">Public Leagues</h4>
                            <LeagueCardList Leagues="_leaguesData.PublicLeagues"
                                            OnDeleteLeague="DeleteLeague"
                                            OnEditLeague="EditLeague" />
                        </div>
                    </div>
                }
                
                <div class="@_myLeaguesColumnClass mb-4">
                    <div class="member-status-column">
                        <h4 class="text-white mb-3">My Private Leagues</h4>
                        <LeagueCardList Leagues="_leaguesData.MyPrivateLeagues"
                                        OnDeleteLeague="DeleteLeague"
                                        OnEditLeague="EditLeague" />
                    </div>
                </div>

                @if (_isAdmin)
                {
                    <div class="col-lg-4 mb-4">
                        <div class="member-status-column">
                            <h4 class="text-white mb-3">Other Private Leagues</h4>
                            <LeagueCardList Leagues="_leaguesData.OtherPrivateLeagues"
                                            OnDeleteLeague="DeleteLeague"
                                            OnEditLeague="EditLeague" />
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private ManageLeaguesDto? _leaguesData;
    private string? _errorMessage;
    private bool _isAdmin;
    private string _myLeaguesColumnClass = "col-lg-4";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _isAdmin = authState.User.IsInRole(RoleNames.Administrator);

        if (!_isAdmin)
            _myLeaguesColumnClass = "col-lg-12";

        await LoadLeagues();
    }

    private async Task LoadLeagues()
    {
        _errorMessage = null;
        try
        {
            _leaguesData = await Http.GetFromJsonAsync<ManageLeaguesDto>("api/leagues");
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while loading leagues: {ex.Message}";
        }
    }

    private void EditLeague(int leagueId) => NavigationManager.NavigateTo($"/leagues/{leagueId}/edit");

    private async Task DeleteLeague((int leagueId, string leagueName) args)
    {
        _errorMessage = null;

        var confirmed = await JsRuntime.InvokeAsync<bool>("blazorInterop.showConfirm", new object[] { $"Delete '{args.leagueName}'?", "This action cannot be undone." });

        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/leagues/{args.leagueId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadLeagues();
                }
                else
                {
                    _errorMessage = $"Error deleting league. Status: {response.StatusCode}";
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"An unexpected error occurred: {ex.Message}";
            }

            StateHasChanged();
        }
    }
}