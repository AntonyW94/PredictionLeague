@page "/leagues/{LeagueId:int}/members"

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using PredictionLeague.Contracts.Leagues
@using PredictionLeague.Domain.Common.Enumerations

<PageTitle>Manage League Members</PageTitle>

<div class="page-container">
    <div class="admin-table-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="fw-bold text-white mb-0">Manage Members for @_leagueData?.LeagueName</h3>
        </div>

        @if (_leagueData == null)
        {
            <p class="text-center text-white"><em>Loading members...</em></p>
        }
        else
        {
            <ApiError Message="@_errorMessage" />

            <div class="row">
                <div class="col-md-4 mb-4">
                    <div class="member-status-column">
                        <h4 class="text-white mb-3">Pending Approval</h4>
                        @if (_leagueData.Members.Any(m => m.Status == LeagueMemberStatus.Pending))
                        {
                            @foreach (var member in _leagueData.Members.Where(m => m.Status == LeagueMemberStatus.Pending))
                            {
                                <div class="member-card">
                                    <div>
                                        <div class="fw-bold">@member.FullName</div>
                                        <div class="small text-white-50">Joined: @member.JoinedAt.ToString("dd MMM yyyy")</div>
                                    </div>
                                    <div class="member-card-actions">
                                        <button class="btn btn-sm red-button" @onclick="() => RejectMemberAsync(member.UserId)">Reject</button>
                                        <button class="btn btn-sm green-button" @onclick="() => ApproveMemberAsync(member.UserId)">Approve</button>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="column-placeholder text-white">No members are currently pending approval.</p>
                        }
                    </div>
                </div>

                <div class="col-md-4 mb-4">
                    <div class="member-status-column">
                        <h4 class="text-white mb-3">Approved Members</h4>
                        @if (_leagueData.Members.Any(m => m.Status == LeagueMemberStatus.Approved))
                        {
                            @foreach (var member in _leagueData.Members.Where(m => m.Status == LeagueMemberStatus.Approved))
                            {
                                <div class="member-card">
                                    <div>
                                        <div class="fw-bold">@member.FullName</div>
                                        <div class="small text-white-50">Joined: @member.JoinedAt.ToString("dd MMM yyyy")</div>
                                    </div>
                                    <span class="badge bg-pl-green">Approved</span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="column-placeholder text-white">No members are currently approved.</p>
                        }
                    </div>
                </div>

                <div class="col-md-4 mb-4">
                    <div class="member-status-column">
                        <h4 class="text-white mb-3">Rejected Members</h4>
                        @if (_leagueData.Members.Any(m => m.Status == LeagueMemberStatus.Rejected))
                        {
                            @foreach (var member in _leagueData.Members.Where(m => m.Status == LeagueMemberStatus.Rejected))
                            {
                                <div class="member-card">
                                    <div>
                                        <div class="fw-bold">@member.FullName</div>
                                        <div class="small text-white-50">Joined: @member.JoinedAt.ToString("dd MMM yyyy")</div>
                                    </div>
                                    <span class="badge bg-pl-pink">Rejected</span>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="column-placeholder text-white">No members are currently rejected.</p>
                        }
                    </div>
                </div>
            </div>

            <button class="btn red-button d-flex align-items-center mt-3" @onclick="BackToLeagues">
                <span class="bi bi-arrow-left-circle-fill me-2"></span>Back to Leagues
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public int LeagueId { get; set; }

    private LeagueMembersPageDto? _leagueData;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadMembersAsync();
    }

    private async Task LoadMembersAsync()
    {
        _errorMessage = null;

        try
        {
            _leagueData = await Http.GetFromJsonAsync<LeagueMembersPageDto>($"api/leagues/{LeagueId}/members");
        }
        catch (Exception)
        {
            _errorMessage = "Could not load league members.";
        }
    }

    private async Task ApproveMemberAsync(string memberId)
    {
        await UpdateMemberStatusAsync(memberId, LeagueMemberStatus.Approved);
    }

    private async Task RejectMemberAsync(string memberId)
    {
        await UpdateMemberStatusAsync(memberId, LeagueMemberStatus.Rejected);
    }

    private async Task UpdateMemberStatusAsync(string memberId, LeagueMemberStatus newStatus)
    {
        _errorMessage = null;
        try
        {
            var response = await Http.PostAsJsonAsync($"api/leagues/{LeagueId}/members/{memberId}/status", newStatus);
            if (response.IsSuccessStatusCode)
                await LoadMembersAsync();
            else
                _errorMessage = $"Failed to update member status. The server returned a {response.StatusCode} error.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"An unexpected error occurred: {ex.Message}";
        }

        StateHasChanged();
    }

    private void BackToLeagues()
    {
        NavigationManager.NavigateTo("/leagues");
    }
}