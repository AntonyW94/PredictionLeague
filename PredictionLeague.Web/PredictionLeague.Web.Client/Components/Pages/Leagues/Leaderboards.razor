@page "/leagues/{LeagueId:int}/leaderboard"
@using PredictionLeague.Contracts.Leaderboards
@attribute [Authorize]

@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>@(_overallLeaderboard?.LeagueName) Leaderboard</PageTitle>

<div class="page-container">
    <div class="admin-table-container">
        @if (_overallLeaderboard == null)
        {
            <p class="text-center text-white"><em>Loading leaderboard...</em></p>
        }
        else
        {
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h3 class="fw-bold text-white mb-0">@_overallLeaderboard.LeagueName</h3>
                    <h5 class="text-white-50">@_overallLeaderboard.SeasonName - Overall Standings</h5>
                </div>
            </div>

            <table class="table striped-table responsive-table">
                <thead>
                <tr>
                    <th style="width: 10%;">Rank</th>
                    <th>Player</th>
                    <th class="text-end" style="width: 20%;">Points</th>
                </tr>
                </thead>
                <tbody>
                @if (_overallLeaderboard.Entries.Any())
                {
                    @foreach (var entry in _overallLeaderboard.Entries)
                    {
                        <tr>
                            <td data-label="Rank" class="fw-bold fs-5">@entry.Rank</td>
                            <td data-label="Player">@entry.PlayerName</td>
                            <td data-label="Points" class="text-end fw-bold fs-5">@entry.TotalPoints</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">There are currently no entries in this Leaderboard</td>
                    </tr>
                }
                </tbody>
            </table>

            <BackAndSaveButtons BackText="Back to Dashboard" OnBackClick="Back" SaveVisible="false"></BackAndSaveButtons>
        }
    </div>
</div>

@code {
    [Parameter]
    public int LeagueId { get; set; }

    private LeaderboardDto? _overallLeaderboard;
    private LeaderboardDto? _monthlyLeaderboard;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _overallLeaderboard = await Http.GetFromJsonAsync<LeaderboardDto>($"api/leaderboard/{LeagueId}/overall");
            _monthlyLeaderboard = await Http.GetFromJsonAsync<LeaderboardDto>($"api/leaderboard/{LeagueId}/monthly");
        }
        catch (Exception)
        {
        }
    }

    private void Back() => NavigationManager.NavigateTo("/dashboard");
}