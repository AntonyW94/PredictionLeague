@page "/leagues/create"

@attribute [Authorize]

@inject HttpClient Http

@using PredictionLeague.Contracts.Leagues

<PageTitle>Create League</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Create New League</h3>
        
        @if (_pageData == null)
        {
            <p class="text-center text-white"><em>Loading Create League...</em></p>
        }
        else
        {
            <BaseFormComponent TModel="CreateLeagueRequest"
                               Model="_model"
                               SubmitAction="HandleCreateLeagueAsync"
                               SuccessRedirectUrl="/leagues"
                               BackUrl="/leagues"
                               SuccessAlertMessage="League created successfully!"
                               BusyText="Creating League...">
                <ChildContent>
                    <div class="mb-3">
                        <label for="season" class="form-label text-white">Season</label>
                        <InputSelect id="season" class="form-select" @bind-Value="_model.SeasonId" @onchange="OnSeasonSelected">
                            @if (_pageData.Seasons.Count != 1)
                            {
                                <option value="0">-- Select a Season --</option>
                            }

                            @foreach (var season in _pageData.Seasons)
                            {
                                <option value="@season.Id">@season.Name</option>
                            }
                        </InputSelect>
                        <StyledValidationMessage For="@(() => _model.SeasonId)" />
                    </div>

                    <div class="mb-3">
                        <label for="name" class="form-label text-white">League Name</label>
                        <InputText id="name" class="form-control" @bind-Value="_model.Name" disabled="@ShouldDisableFields" />
                        <StyledValidationMessage For="@(() => _model.Name)" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="price" class="form-label text-white">Entry Fee (£)</label>
                            <InputNumber id="price" class="form-control" @bind-Value="_model.Price" placeholder="0.00" disabled="@ShouldDisableFields" />
                            <div class="form-text text-white-50">Enter 0 for a free-to-play league.</div>
                            <StyledValidationMessage For="@(() => _model.Price)" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label for="entryDeadline" class="form-label text-white">Entry Deadline</label>
                            <InputDate id="entryDeadline" Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="_model.EntryDeadline" max="@MaxDate" disabled="@ShouldDisableFields" />
                            <div class="form-text text-white-50">Deadline must be before the season starts.</div>
                            <StyledValidationMessage For="@(() => _model.EntryDeadline)" />
                        </div>
                    </div>
                </ChildContent>
            </BaseFormComponent>
        }
    </div>
</div>

@code {
    private CreateLeaguePageData? _pageData;
    private readonly CreateLeagueRequest _model = new();
    private bool ShouldDisableFields => _pageData?.Seasons.Count != 1 && _model.SeasonId == 0;
    private string? MaxDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _pageData = await Http.GetFromJsonAsync<CreateLeaguePageData>("api/leagues/create-data");
       
        if (_pageData?.Seasons.Count == 1)
        {
            var singleSeason = _pageData.Seasons.First();
            _model.SeasonId = singleSeason.Id;
            UpdateDeadlineAndMaxDate(singleSeason.StartDate);
        }
    }

    private void OnSeasonSelected(ChangeEventArgs e)
    {
        var selectedSeasonId = int.Parse(e.Value?.ToString() ?? "0");
        _model.SeasonId = selectedSeasonId;

        if (selectedSeasonId > 0 && _pageData != null)
        {
            var selectedSeason = _pageData.Seasons.FirstOrDefault(s => s.Id == selectedSeasonId);
            if (selectedSeason != null)
                UpdateDeadlineAndMaxDate(selectedSeason.StartDate);
        }
        else
        {
            MaxDate = null;
        }
    }

    private void UpdateDeadlineAndMaxDate(DateTime seasonStartDate)
    {
        var deadline = seasonStartDate.AddDays(-1);
        _model.EntryDeadline = deadline;
        MaxDate = deadline.ToString("yyyy-MM-dd");
    }

    private Task<HttpResponseMessage> HandleCreateLeagueAsync()
    {
        return Http.PostAsJsonAsync("api/leagues/create", _model);
    }
}
