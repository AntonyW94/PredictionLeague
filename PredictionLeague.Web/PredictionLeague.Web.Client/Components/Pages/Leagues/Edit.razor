@page "/leagues/{LeagueId:int}/edit"

@attribute [Authorize]

@inject HttpClient Http

@using PredictionLeague.Contracts.Leagues

<PageTitle>Edit League</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Edit League</h3>
        @if (_model == null)
        {
            <p class="text-center text-white"><em>Loading...</em></p>
        }
        else
        {
            <BaseFormComponent TModel="UpdateLeagueRequest"
                               Model="_model"
                               SubmitAction="HandleUpdateLeagueAsync"
                               SuccessRedirectUrl="/leagues"
                               BackUrl="/leagues"
                               SuccessAlertMessage="League updated successfully!"
                               BusyText="Saving...">
                <ChildContent>
                    <div class="mb-3">
                        <label class="form-label text-white">Season</label>
                        <div class="form-control-plaintext" style="background-color: var(--pl-light-purple); color: white; font-weight: bold;">
                            @_seasonName
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="name" class="form-label text-white">League Name</label>
                        <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                        <StyledValidationMessage For="@(() => _model.Name)" />
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="price" class="form-label text-white">Entry Fee (£)</label>
                            <InputNumber id="price" class="form-control" @bind-Value="_model.Price" />
                            <StyledValidationMessage For="@(() => _model.Price)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            @if (_entryCodeForDisplay != "Public")
                            {
                                <label class="form-label text-white">Entry Code</label>
                                <div class="form-control-plaintext" style="font-size: 1.3rem; color: var(--pl-cyan); font-weight: bold; font-family: monospace; padding-top: 5px;">
                                    @_entryCodeForDisplay
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="entryDeadline" class="form-label text-white">Entry Deadline</label>
                        <InputDate id="entryDeadline" Type="InputDateType.DateTimeLocal" class="form-control" @bind-Value="_model.EntryDeadline" />
                        <StyledValidationMessage For="@(() => _model.EntryDeadline)" />
                    </div>
                </ChildContent>
            </BaseFormComponent>
        }
    </div>
</div>

@code {
    [Parameter] public int LeagueId { get; set; }
    private UpdateLeagueRequest? _model;
    private string? _entryCodeForDisplay;
    private string? _seasonName;

    protected override async Task OnInitializedAsync()
    {
        var league = await Http.GetFromJsonAsync<LeagueDto>($"api/leagues/{LeagueId}");
        if (league != null)
        {
            _model = new UpdateLeagueRequest
            {
                Name = league.Name,
                Price = league.Price,
                EntryDeadline = league.EntryDeadline
            };
            _entryCodeForDisplay = league.EntryCode;
            _seasonName = league.SeasonName;
        }
    }

    private Task<HttpResponseMessage> HandleUpdateLeagueAsync()
    {
        return Http.PutAsJsonAsync($"api/leagues/{LeagueId}/update", _model);
    }
}