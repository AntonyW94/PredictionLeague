@page "/leagues/{LeagueId:int}/edit"

@inject HttpClient Http
@inject NavigationManager NavigationManager

@using PredictionLeague.Contracts.Admin.Leagues

<PageTitle>Edit League</PageTitle>

<div class="page-container">
    <div class="form-container">
        <h3 class="text-center fw-bold text-white mb-4">Edit League</h3>
        @if (_model == null)
        {
            <p class="text-center text-white"><em>Loading...</em></p>
        }
        else
        {
            <EditForm Model="_model" OnValidSubmit="HandleUpdateLeague">
                <FluentValidationValidator />
                <ApiError Message="@_errorMessage" />
                <ApiSuccess Message="@_successMessage" />

                <div class="mb-3">
                    <label for="name" class="form-label text-white">League Name</label>
                    <InputText id="name" class="form-control" @bind-Value="_model.Name" />
                </div>

                <div class="mb-3">
                    <label for="entryCode" class="form-label text-white">Entry Code (optional)</label>
                    <InputText id="entryCode" class="form-control" @bind-Value="_model.EntryCode" />
                </div>

                <BackAndSaveButtons BackText="Back to Leagues" OnBackClick="Back" BusyText="Saving..." IsBusy="_isBusy"></BackAndSaveButtons>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public int LeagueId { get; set; }
    private UpdateLeagueRequest? _model;
    private bool _isBusy;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        var league = await Http.GetFromJsonAsync<LeagueDto>($"api/leagues/{LeagueId}");
        if (league != null)
            _model = new UpdateLeagueRequest { Name = league.Name, EntryCode = league.EntryCode };
    }

    private async Task HandleUpdateLeague()
    {
        _isBusy = true;
        _errorMessage = null;
        _successMessage = null;
        
        var response = await Http.PutAsJsonAsync($"api/leagues/{LeagueId}/update", _model);
        if (response.IsSuccessStatusCode)
            _successMessage = "League updated successfully!";
        else
            _errorMessage = "Error updating league.";

        _isBusy = false;
    }

    private void Back() => NavigationManager.NavigateTo("/leagues");
}
